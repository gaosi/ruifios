<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/security" 
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd"
	default-lazy-init="true">

	<description>Spring权限配置 </description>
	
	<!--登录页面不过滤 -->
    <http pattern="/login.jsp" security="none">

	<!-- access-denied-page的意思是，当验证权限失败后会跳转到的页面 -->
	<http access-denied-page="/accessdenied.jsp">
		<form-login login-page="/login.jsp">
			<!--访问/**资源的用户必须具有ROLE_USER的权限 -->
	        <!-- <intercept-url pattern="/**" access="ROLE_USER" /> -->
	        <session-management>
	            <concurrency-control error-if-maximum-exceeded="false" max-sessions="1"></concurrency-control>
	        </session-management>
	        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
	        <custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="securityFilter"></custom-filter>
	    </form-login>
	</http>

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性 -->
    <b:bean class="com.ruifios.spring.security.FilterSecurityInterceptor" id="securityFilter">
        <b:property name="authenticationManager" ref="authenticationManager">
        	<b:property name="accessDecisionManager" ref="accessDecisionManagerBean">
       			<b:property name="securityMetadataSource" ref="securityMetadataSource"></b:property>
    		</b:property>
    	</b:property>
    </b:bean>
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager> 
        <authentication-provider user-service-ref="customUserDetailsService"> 
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
            <password-encoder ref="passwordEncoder"/>
        </authentication-provider>
    </authentication-manager>
 	
 	<!-- 通过 customUserDetailsService,Spring会自动的用户的访问级别. -->  
    <b:bean id="customUserDetailsService" class="com.ruifios.spring.security.CustomUserDetailsService"/>
    	
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
   	<b:bean id="customAccessDecisionManagerBean" class="com.ruifios.spring.security.CustomAccessDecisionManager"/>
    
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
   	<b:bean id="securityMetadataSource" class="com.ruifios.spring.security.CustomInvocationSecurityMetadataSource"/> 
    
	<!-- 对密码进行MD5编码 -->  
    <b:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>  
	
</beans>